# THis is the workflow that updates the badges about the state of the main
# brach.
name: Tests

on:
  push:
    branches:
      - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Coverage

jobs:
  build-test-and-coverage:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

        # Install a dependency for test coverage report
      - name: Install gcovr
        run: sudo apt update && sudo apt install gcovr

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=ON -DCOVERAGE=ON -DBUILD_GPGPU=OFF

        # Always a clean build. If it uses too much CI credits we can introduce
        # caching. See
        # https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#caching-dependencies.
      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . -j4 --config $BUILD_TYPE

        # Run coverage before tests so if tests fail, coverage report is still
        # generated.
      - name: Coverage for Unit Tests
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: make coverage

        # Upload coverage results to Codecov
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{github.workspace}}/build/coverage.info
          flags: unit # optional
          fail_ci_if_error: false
          verbose: true

        # Run coverage before tests so if tests fail, coverage report is still
        # generated.
      - name: Coverage for Integrated Tests
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: make coverage_integrated_tests

        # Upload coverage results to Codecov
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{github.workspace}}/build/coverage_integrated_tests.info
          flags: integrated # optional
          fail_ci_if_error: false
          verbose: true

      - name: Unit Tests
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: make test

      - name: Integrated Tests
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./test_s_phase
